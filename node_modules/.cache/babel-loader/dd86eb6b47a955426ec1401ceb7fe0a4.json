{"ast":null,"code":"var _jsxFileName = \"/home/drigger/Documents/Project/DataModel/front/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport loginService from './services/login';\nimport { BrowserRouter as Router, Routes, Route, useNavigate } from 'react-router-dom';\nimport Notification from './components/Notification';\nimport LoginForm from './components/LoginForm';\nimport NavBar from './components/NavBar';\nimport Home from './services/Home';\nimport Adminupd from './services/Adminupd';\nimport AddTask from './services/AddTask';\nimport Adminmain from './services/AdminMain';\nimport Admincr from './services/Admincreate';\nimport Tasks from './services/Tasks';\nimport AddAction from './services/AddAction';\nimport UserMain from './services/UserMain';\nimport UsertaskIns from './services/UsertaskIns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // user state will store the logged in user object, if no login has been done yet then it will be null\n  const [user, setUser] = useState(null);\n\n  // Will store the bills of the logged in user\n  const [bills, setBills] = useState([]);\n\n  // These states are used to control the notifications that show up at the top of the screen for events like \n  // login, signup, watchlist creation, etc.\n  const [notification, setNotification] = useState(null);\n  const [notificationType, setNotificationType] = useState(null);\n\n  // Create a notification at the top of the screen with given message for 10 seconds \n  // Notifications are of two types, \"error\" and \"success\"\n  // The appearance of these two notifications can be adjusted via the index.css file\n  const notificationHandler = (message, type) => {\n    setNotification(message);\n    setNotificationType(type);\n    setTimeout(() => {\n      setNotificationType(null);\n      setNotification(null);\n    }, 3000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/adminupd\",\n          element: /*#__PURE__*/_jsxDEV(Adminupd, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 50\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/addtask/:id\",\n          element: /*#__PURE__*/_jsxDEV(AddTask, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 53\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/adminmain\",\n          element: /*#__PURE__*/_jsxDEV(Adminmain, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 51\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/admincr\",\n          element: /*#__PURE__*/_jsxDEV(Admincr, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 49\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/viewtask/:id\",\n          element: /*#__PURE__*/_jsxDEV(Tasks, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 54\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/addaction/:wid/:tid\",\n          element: /*#__PURE__*/_jsxDEV(AddAction, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 61\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/usermain/:id\",\n          element: /*#__PURE__*/_jsxDEV(UserMain, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 54\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/userins\",\n          element: /*#__PURE__*/_jsxDEV(UsertaskIns, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 49\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"fUvAiJozRLrgDX7nKLHAHWnzIYE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","loginService","BrowserRouter","Router","Routes","Route","useNavigate","Notification","LoginForm","NavBar","Home","Adminupd","AddTask","Adminmain","Admincr","Tasks","AddAction","UserMain","UsertaskIns","App","user","setUser","bills","setBills","notification","setNotification","notificationType","setNotificationType","notificationHandler","message","type","setTimeout"],"sources":["/home/drigger/Documents/Project/DataModel/front/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport loginService from './services/login'\nimport { BrowserRouter as Router, Routes, Route, useNavigate } from 'react-router-dom';\nimport Notification from './components/Notification'\nimport LoginForm from './components/LoginForm'\nimport NavBar from './components/NavBar'\nimport Home from './services/Home'\nimport Adminupd from './services/Adminupd';\nimport AddTask from './services/AddTask';\nimport Adminmain from './services/AdminMain';\nimport Admincr from './services/Admincreate';\nimport Tasks from './services/Tasks';\nimport AddAction from './services/AddAction';\nimport UserMain from './services/UserMain';\nimport UsertaskIns from './services/UsertaskIns';\n\nconst App = () => {\n\n  // user state will store the logged in user object, if no login has been done yet then it will be null\n  const [ user, setUser ] = useState(null)\n\n  // Will store the bills of the logged in user\n  const [ bills, setBills ] = useState([])\n\n  // These states are used to control the notifications that show up at the top of the screen for events like \n  // login, signup, watchlist creation, etc.\n  const [ notification, setNotification ] = useState(null)\n  const [ notificationType, setNotificationType ] = useState(null)\n\n  // Create a notification at the top of the screen with given message for 10 seconds \n  // Notifications are of two types, \"error\" and \"success\"\n  // The appearance of these two notifications can be adjusted via the index.css file\n  const notificationHandler = (message, type) => {\n    setNotification(message)\n    setNotificationType(type)\n\n    setTimeout(() => {\n      setNotificationType(null)\n      setNotification(null)\n    }, 3000)\n  }\n\n\n  \n  return (\n    <div>\n    {\n        <Router>\n          <Routes>\n          <Route exact path=\"/\" element={<Home/>} /> \n          <Route exact path=\"/adminupd\" element={<Adminupd/>} /> \n          <Route exact path=\"/addtask/:id\" element={<AddTask />} />\n          <Route exact path=\"/adminmain\" element={<Adminmain />} />\n          <Route exact path=\"/admincr\" element={<Admincr />} />\n          <Route exact path=\"/viewtask/:id\" element={<Tasks />} />\n          <Route exact path=\"/addaction/:wid/:tid\" element={<AddAction />} />\n          <Route exact path=\"/usermain/:id\" element={<UserMain />} /> \n          <Route exact path=\"/userins\" element={<UsertaskIns />} />\n          </Routes>\n        </Router>\n      }\n\n\n    </div>\n  )\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}